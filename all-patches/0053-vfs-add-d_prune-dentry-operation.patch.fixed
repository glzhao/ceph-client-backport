Subject: [PATCH 53/201] ceph-backport: add d_prune dentry operation

This is based on the patch(commit is f0023bc617ba600956b922
6f1806033d7486c8ba). The origin patch can't be patched normally 
because of two parts:
	1)Function flow of shrink_dcache_for_umount_subtree changes
	2)Many macros's value in include/linux/dcache.h changes
This is the new patch after the issues have be fixed.

NOTE:
	All above commits are based on kernel mainline.

---

Index: linux-3.0/Documentation/filesystems/Locking
===================================================================
--- linux-3.0.orig/Documentation/filesystems/Locking
+++ linux-3.0/Documentation/filesystems/Locking
@@ -29,6 +29,7 @@ d_hash		no		no		no		maybe
 d_compare:	yes		no		no		maybe
 d_delete:	no		yes		no		no
 d_release:	no		no		yes		no
+d_prune:        no              yes             no              no
 d_iput:		no		no		yes		no
 d_dname:	no		no		no		no
 d_automount:	no		no		yes		no
Index: linux-3.0/fs/dcache.c
===================================================================
--- linux-3.0.orig/fs/dcache.c
+++ linux-3.0/fs/dcache.c
@@ -225,7 +225,7 @@ static void dentry_unlink_inode(struct d
 }
 
 /*
- * dentry_lru_(add|del|move_tail) must be called with d_lock held.
+ * dentry_lru_(add|del|prune|move_tail) must be called with d_lock held.
  */
 static void dentry_lru_add(struct dentry *dentry)
 {
@@ -246,6 +246,9 @@ static void __dentry_lru_del(struct dent
 	dentry_stat.nr_unused--;
 }
 
+/*
+ * Remove a dentry with references from the LRU.
+ */
 static void dentry_lru_del(struct dentry *dentry)
 {
 	if (!list_empty(&dentry->d_lru)) {
@@ -255,6 +258,23 @@ static void dentry_lru_del(struct dentry
 	}
 }
 
+/*
+ * Remove a dentry that is unreferenced and about to be pruned
+ * (unhashed and destroyed) from the LRU, and inform the file system.
+ * This wrapper should be called _prior_ to unhashing a victim dentry.
+ */
+static void dentry_lru_prune(struct dentry *dentry)
+{
+	if (!list_empty(&dentry->d_lru)) {
+		if (dentry->d_flags & DCACHE_OP_PRUNE)
+			dentry->d_op->d_prune(dentry);
+
+		spin_lock(&dcache_lru_lock);
+		__dentry_lru_del(dentry);
+		spin_unlock(&dcache_lru_lock);
+	}
+}
+
 static void dentry_lru_move_tail(struct dentry *dentry)
 {
 	spin_lock(&dcache_lru_lock);
@@ -393,8 +413,12 @@ relock:
 
 	if (ref)
 		dentry->d_count--;
-	/* if dentry was on the d_lru list delete it from there */
-	dentry_lru_del(dentry);
+	/*
+	 * if dentry was on the d_lru list delete it from there.
+	 * inform the fs via d_prune that this dentry is about to be
+	 * unhashed and destroyed.
+	 */
+	dentry_lru_prune(dentry);
 	/* if it was on the hash then remove it */
 	__d_drop(dentry);
 	return d_kill(dentry, parent);
@@ -904,7 +928,12 @@ void shrink_dcache_for_umount_subtree(st
 
 	/* detach this root from the system */
 	spin_lock(&dentry->d_lock);
-	dentry_lru_del(dentry);
+	/*
+	 * remove the dentry from the lru, and inform
+	 * the fs that this dentry is about to be
+	 * unhashed and destroyed.
+	 */
+	dentry_lru_prune(dentry);
 	__d_drop(dentry);
 	spin_unlock(&dentry->d_lock);
 
@@ -920,7 +949,7 @@ void shrink_dcache_for_umount_subtree(st
 					    d_u.d_child) {
 				spin_lock_nested(&loop->d_lock,
 						DENTRY_D_LOCK_NESTED);
-				dentry_lru_del(loop);
+				dentry_lru_prune(loop);
 				__d_drop(loop);
 				spin_unlock(&loop->d_lock);
 			}
@@ -1393,6 +1422,8 @@ void d_set_d_op(struct dentry *dentry, c
 		dentry->d_flags |= DCACHE_OP_REVALIDATE;
 	if (op->d_delete)
 		dentry->d_flags |= DCACHE_OP_DELETE;
+	if (op->d_prune)
+		dentry->d_flags |= DCACHE_OP_PRUNE;
 
 }
 EXPORT_SYMBOL(d_set_d_op);
Index: linux-3.0/include/linux/dcache.h
===================================================================
--- linux-3.0.orig/include/linux/dcache.h
+++ linux-3.0/include/linux/dcache.h
@@ -165,6 +165,7 @@ struct dentry_operations {
 			unsigned int, const char *, const struct qstr *);
 	int (*d_delete)(const struct dentry *);
 	void (*d_release)(struct dentry *);
+	void (*d_prune)(struct dentry *);
 	void (*d_iput)(struct dentry *, struct inode *);
 	char *(*d_dname)(struct dentry *, char *, int);
 	struct vfsmount *(*d_automount)(struct path *);
@@ -209,6 +210,12 @@ struct dentry_operations {
 #define DCACHE_GENOCIDE		0x0200
 #define DCACHE_SHRINK_LIST	0x0400
 
+/*
+ * Because there are no other bits on the first byte,
+ * so we must choose the next bit after the lagerest
+ * value(DCACHE_SHRINK_LIST == 0x0400)
+ */
+#define DCACHE_OP_PRUNE         0x0800
 #define DCACHE_OP_HASH		0x1000
 #define DCACHE_OP_COMPARE	0x2000
 #define DCACHE_OP_REVALIDATE	0x4000
